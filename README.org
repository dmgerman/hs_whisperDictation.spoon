#+title: WhisperDictation Spoon
#+author: dmg
#+date: 2025
#+language: en

* Overview

WhisperDictation is a [[https://www.hammerspoon.org/][Hammerspoon]] Spoon that provides local, offline voice dictation powered by [[https://openai.com/research/whisper][OpenAI's Whisper]] model.

It records audio from your microphone and transcribes it using =whisperkit-cli=, then automatically copies the transcribed text to your clipboard. Both recording and transcription happen asynchronously, allowing you to continue working without interruption. A menubar indicator shows recording status and elapsed time.

** Key Features

- üéôÔ∏è Local voice-to-text transcription (no cloud required)
- üåê Multi-language support (English, Japanese, Spanish, French, etc.)
- üìã Automatic clipboard copy with character count
- ‚ö° Asynchronous processing - continue working while transcription happens in the background
- ‚è±Ô∏è Elapsed time indicator during recording
- üõë Automatic timeout to prevent unattended recordings
- üîç Structured logging with file and console output
- ‚å®Ô∏è Customizable hotkeys
- üíæ Transcript files saved alongside audio

* Requirements

** Common Dependencies

All transcription methods require:

1. [[https://sox.sourceforge.net/][sox]] - Audio recording tool
   #+begin_src bash
   brew install sox
   #+end_src

** Transcription Backend (Choose One)

You must choose and install one of the following transcription backends:

*** Option 1: WhisperKit CLI

[[https://github.com/argmaxinc/whisperkit-cli][whisperkit-cli]] - Apple's optimized Whisper implementation

Installation:
#+begin_src bash
brew install whisperkit-cli
#+end_src

Models are downloaded automatically on first use. No additional setup required.

*** Option 2: Whisper CLI (Default)

[[https://github.com/ggerganov/whisper.cpp][whisper.cpp]] - C++ implementation of Whisper

Installation:
#+begin_src bash
brew install whisper-cli
#+end_src

You must manually download and install the desired model binary. Download available models from:
https://huggingface.co/ggerganov/whisper.cpp/tree/main

Example (for large-v3 model):
#+begin_src bash
mkdir -p /usr/local/whisper
cd /usr/local/whisper
wget https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-large-v3.bin
#+end_src

Then configure the model path in your Hammerspoon config:
#+begin_src lua
wd.transcriptionMethods.whispercli.config.modelPath = "/usr/local/whisper/ggml-large-v3.bin"
#+end_src

* Installation

1. Clone or download the Spoon into your Hammerspoon Spoons directory:
   #+begin_src bash
   ~/.hammerspoon/Spoons/hs_whisperDictation.spoon/
   #+end_src

2. Add to your Hammerspoon config (~/.hammerspoon/init.lua):

*Using WhisperKit CLI (default)*:

   #+begin_src lua
   wd = hs.loadSpoon("hs_whisperDictation")
   wd.transcriptionMethods.whisperkitcli.config.model = "large-v3"
   wd.languages = {"en", "ja", "es", "fr"}
   wd.transcriptionMethod = "whisperkitcli"
   wd:bindHotKeys({
       toggle = {{"ctrl", "cmd"}, "d"},
       nextLang = {{"ctrl", "cmd"}, "l"},
   })
   wd:start()
   #+end_src


*Using Whisper CLI*:

   #+begin_src lua
   wd = hs.loadSpoon("hs_whisperDictation")
   wd.transcriptionMethods.whispercli.config.cmd = "/opt/homebrew/bin/whisper-cli"
   wd.transcriptionMethods.whispercli.config.modelPath = "/usr/local/whisper/ggml-large-v3.bin"
   wd.languages = {"en", "ja", "es", "fr"}
   wd.transcriptionMethod = "whispercli"
   wd:bindHotKeys({
       toggle = {{"ctrl", "cmd"}, "d"},
       nextLang = {{"ctrl", "cmd"}, "l"},
   })
   wd:start()
   #+end_src

3. Reload Hammerspoon configuration

** Transcription Methods

The Spoon supports multiple transcription backends. You must choose which one to use by setting =obj.transcriptionMethod=.

*** Supported Methods

**** =whisperkitcli=
Uses [[https://github.com/argmaxinc/whisperkit-cli][WhisperKit CLI]]. Outputs transcription directly to stdout.

Configuration:
#+begin_src lua
wd.transcriptionMethods.whisperkitcli.config = {
  cmd = "/opt/homebrew/bin/whisperkit-cli",
  model = "large-v3",  -- or "tiny", "base", "small", "medium"
}
wd.transcriptionMethod = "whisperkitcli"
#+end_src

**** =whispercli= (Default)
Uses [[https://github.com/ggerganov/whisper.cpp][Whisper.cpp CLI]]. Creates a =.txt= file alongside the audio file.

Configuration:
#+begin_src lua
wd.transcriptionMethods.whispercli.config = {
  cmd = "/opt/homebrew/bin/whisper-cli",
  modelPath = "/usr/local/whisper/ggml-large-v3.bin",
}
wd.transcriptionMethod = "whispercli"
#+end_src

** Customizable Properties

| Property              | Type   | Default                 | Description                                                   |
|-----------------------+--------+-------------------------+---------------------------------------------------------------|
| =tempDir=             | string | "/tmp/whisper_dict"     | Temp directory for recordings                                 |
| =recordCmd=           | string | "/opt/homebrew/bin/sox" | Path to sox binary                                            |
| =transcriptionMethod= | string | "whispercli"            | Active transcription method ("whisperkitcli" or "whispercli") |
| =languages=           | table  | {"en"}                  | List of supported languages                                   |
| =timeoutSeconds=      | number | 300                     | Auto-stop recording after N seconds. Set to nil to disable    |
| =showRecordingIndicator= | bool   | true                    | Display large red circle in center of screen while recording  |
| =icons=               | table  | See below               | Emoji icons for UI states                                     |
| =logger.enableConsole= | bool   | true                    | Print messages to Hammerspoon console                         |
| =logger.enableFile=   | bool   | false                   | Write messages to log file                                    |
| =logger.level=        | string | "INFO"                  | Log level: "DEBUG", "INFO", "WARN", or "ERROR"               |

** Model Selection

Model configuration depends on which transcription method you use.

*** WhisperKit CLI
Set the model string:

#+begin_src lua
wd.transcriptionMethods.whisperkitcli.config.model = "large-v3"  -- or "tiny", "base", "small", "medium"
#+end_src

Available models and their characteristics:

| Model      | Accuracy | Speed   | Size  |
|------------+----------+---------+-------|
| tiny       | Low      | Fastest | 39M   |
| base       | Fair     | Fast    | 140M  |
| small      | Good     | Medium  | 466M  |
| medium     | Better   | Slower  | 1.5G  |
| large-v3   | Best     | Slowest | 2.9G  |

‚ö†Ô∏è *Warning*: Transcription time depends heavily on the model chosen and the length of audio. Larger models provide better accuracy but take significantly longer to process. For example, a 10-second recording might take 5-10 seconds with "tiny" but several minutes with "large-v3" on standard hardware.

‚ö†Ô∏è *First-Time Model Download*: The first time you use a model, it will be automatically downloaded (this happens only once). Download times vary by model size and internet speed. Ensure you have sufficient disk space and a stable internet connection when first running the Spoon with a new model.

*** Whisper CLI
Set the path to your pre-downloaded model binary:

#+begin_src lua
wd.transcriptionMethods.whispercli.config.modelPath = "/path/to/ggml-large-v3.bin"
#+end_src

Whisper.cpp models must be downloaded separately. See the [[https://github.com/ggerganov/whisper.cpp][whisper.cpp repository]] for available models.

** Icon Customization

You can customize the emoji icons used throughout the Spoon. Available icons are:

| Icon              | Property        | Default | Usage                      |
|-------------------+-----------------+---------+----------------------------|
| =idle=            | obj.icons.idle  | üé§      | Idle/ready state           |
| =recording=       | obj.icons.recording | üéôÔ∏è      | During recording           |
| =clipboard=       | obj.icons.clipboard | üìã      | Text copied to clipboard   |
| =language=        | obj.icons.language | üåê      | Language switching         |
| =stopped=         | obj.icons.stopped | üõë      | Recording stopped          |
| =transcribing=    | obj.icons.transcribing | ‚è≥      | During transcription       |
| =error=           | obj.icons.error | ‚ùå      | Error notifications        |
| =info=            | obj.icons.info  | ‚ÑπÔ∏è      | Info notifications         |

Customize icons in your Hammerspoon config:

#+begin_src lua
wd.icons.idle = "üéôÔ∏è"
wd.icons.recording = "üî¥"
wd.icons.clipboard = "‚úÖ"
#+end_src

** Recording Indicator

By default, a large red circle appears in the center of your screen while recording to provide visual feedback. You can disable this if preferred:

#+begin_src lua
wd.showRecordingIndicator = false  -- Disable the visual indicator
#+end_src

** Recording Timeout

To prevent unattended recordings from running indefinitely, the Spoon includes an automatic timeout feature. When enabled, recordings automatically stop after a specified duration.

*** Configuration

The timeout is controlled via the =timeoutSeconds= property:

#+begin_src lua
wd.timeoutSeconds = 300  -- Stop recording after 300 seconds (5 minutes) - DEFAULT
#+end_src

You can customize it to any duration:

#+begin_src lua
wd.timeoutSeconds = 60   -- Stop after 1 minute
wd.timeoutSeconds = 600  -- Stop after 10 minutes
wd.timeoutSeconds = nil  -- Disable timeout completely
#+end_src

*** Behavior

- When the timeout is reached, recording automatically stops
- A warning notification is shown: "üõë Recording auto-stopped due to timeout (300s)"
- The audio is transcribed and copied to clipboard, just like a manual stop
- A log message is recorded for debugging

*** Use Cases

- **Security**: Prevent accidental long recordings consuming disk space or battery
- **Automation**: Useful in scripts or automated workflows
- **Safety**: Ensures unattended voice input doesn't run indefinitely

** Hotkey Binding

Define custom hotkeys using the =bindHotKeys()= method:

#+begin_src lua
wd:bindHotKeys({
    toggle = {{"ctrl", "cmd"}, "d"},      -- Start/stop recording
    nextLang = {{"ctrl", "cmd"}, "l"},    -- Open language chooser
})
#+end_src

** Logging Configuration

By default, the logger outputs INFO-level and higher messages (INFO, WARN, ERROR) to the Hammerspoon console. This provides useful feedback without being too verbose.

Default settings:
- Console output: ‚úì Enabled
- File output: ‚úó Disabled
- Log level: INFO (shows INFO, WARN, ERROR; hides DEBUG)

To customize:

#+begin_src lua
-- Optional: Enable console logging (already enabled by default)
wd.logger.enableConsole = true

-- Optional: Enable file logging for persistent records
wd.logger.enableFile = true
wd.logger.logFile = os.getenv("HOME") .. "/.hammerspoon/Spoons/hs_whisperDictation/whisper.log"

-- Optional: Set log level for maximum verbosity
-- Levels: DEBUG (most verbose), INFO (default), WARN, ERROR (least verbose)
wd.logger:setLevel("DEBUG")
#+end_src

*** Viewing Logs

*Console Output* (recommended for troubleshooting):
- Open Hammerspoon menu ‚Üí Console to view messages
- All messages appear here automatically (enableConsole is true by default)
- Real-time feedback as you use the Spoon

*File Output* (for persistent records):
- View log file with: =tail -f ~/.hammerspoon/Spoons/hs_whisperDictation/whisper.log=
- Useful for debugging issues that occur when console is not visible
- Requires =enableFile = true= to be set

* Usage

** Starting Recording

Click the menubar icon (üé§) or press your configured toggle hotkey (default: Ctrl+Cmd+D).

The menubar will update to show:
- üéôÔ∏è Recording indicator
- Elapsed time in seconds
- Current language code

** Stopping Recording

Click the menubar icon again or press the toggle hotkey.

The audio is automatically transcribed asynchronously in the background, and the text is copied to your clipboard once transcription completes. You can continue working while transcription happens without waiting for it to finish.

‚ö†Ô∏è *Warning*: It is technically possible to start a new recording while transcription is still in progress. However, the menubar interface may not properly reflect the current state in this scenario. Use with caution to avoid confusion.

** Switching Languages

Press your language switch hotkey (default: Ctrl+Cmd+L) to open a language chooser menu displaying all available languages. The currently active language is marked with a "‚úì Selected" indicator.

The menubar will update to show the new language code.

** Files Generated

Recordings and transcripts are stored in =tempDir=:

#+begin_src
/tmp/whisper_dict/
‚îú‚îÄ‚îÄ en-20240101-120000.wav    # Audio file
‚îú‚îÄ‚îÄ en-20240101-120000.txt    # Transcript
‚îî‚îÄ‚îÄ ...
#+end_src

* API Reference

** Methods

*** =start()=
Initializes the Spoon and sets up the menubar.

#+begin_src lua
wd:start()
#+end_src

*** =stop()=
Stops the Spoon, cleans up resources, and removes the menubar.

#+begin_src lua
wd:stop()
#+end_src

*** =toggleTranscribe()=
Toggles recording on and off. When recording is stopped, automatically transcribes the audio and copies the result to the clipboard.

Can be called directly as a method or bound to a hotkey.

#+begin_src lua
-- Call directly
wd:toggleTranscribe()

-- Or bind to a hotkey
wd:bindHotKeys({
    toggle = {{"ctrl", "cmd"}, "d"},
    nextLang = {{"ctrl", "cmd"}, "l"},
})
#+end_src

*** =bindHotKeys(mapping)=
Binds hotkeys for controlling the Spoon.

#+begin_src lua
wd:bindHotKeys({
    toggle = {{"ctrl", "cmd"}, "d"},
    nextLang = {{"ctrl", "cmd"}, "l"},
})
#+end_src

** Logger Methods

The Spoon includes a custom logger accessible via =obj.logger=. All messages are printed to the Hammerspoon console by default (at INFO level or higher):

- =logger:debug(msg)= - Debug level message (hidden by default, most verbose)
- =logger:info(msg, showAlert)= - Info level message (shown by default, optional alert popup)
- =logger:warn(msg, showAlert)= - Warning level message (always shown, shows alert popup by default)
- =logger:error(msg, showAlert)= - Error level message (always shown, shows alert popup by default)
- =logger:setLevel(level)= - Change log level: "DEBUG" (most verbose), "INFO" (default), "WARN", "ERROR" (least verbose)

All messages output to:
- **Console**: Hammerspoon menu ‚Üí Console - enabled by default
- **Log File**: =~/.hammerspoon/Spoons/hs_whisperDictation/whisper.log= - requires =enableFile = true=

* Troubleshooting

** Enabling Debug Logging

For any issues, start by enabling verbose logging to see detailed messages in the Hammerspoon console:

#+begin_src lua
wd.logger:setLevel("DEBUG")
-- Then view messages: Hammerspoon menu ‚Üí Console
#+end_src

All messages from the Spoon will appear in the console in real-time, showing exactly what's happening.

** Transcription Method Not Found

If you see an error about your transcription method not being found:

1. Check the Hammerspoon console for detailed error messages (Hammerspoon menu ‚Üí Console)

2. Verify you've selected the correct method:
   #+begin_src lua
   wd.transcriptionMethod = "whisperkitcli"  -- or "whispercli"
   #+end_src

3. Check the command path is correct for your system:
   #+begin_src bash
   which whisperkit-cli   # for whisperkitcli
   which whisper-cli      # for whispercli
   #+end_src

4. Update the path in your config if needed:
   #+begin_src lua
   wd.transcriptionMethods.whisperkitcli.config.cmd = "/path/to/whisperkit-cli"
   -- or
   wd.transcriptionMethods.whispercli.config.cmd = "/path/to/whisper-cli"
   #+end_src

** "recording command not found"

Similarly, check =sox= is installed:

#+begin_src bash
which sox
#+end_src

Update the path if necessary:

#+begin_src lua
wd.recordCmd = "/path/to/sox"
#+end_src

** Transcription Produces Empty Output

- Ensure your microphone is working and not muted
- Check the Hammerspoon console for detailed error messages:
  - Go to Hammerspoon menu ‚Üí Console
  - Look for error messages from WhisperDictation
  - Enable DEBUG logging for maximum detail: =wd.logger:setLevel("DEBUG")=
- Verify the audio file was actually recorded by listening to it:
  #+begin_src bash
  # Find the most recent audio file
  ls -t /tmp/whisper_dict/*.wav | head -1
  # Listen to it (verify you can hear your voice)
  afplay /tmp/whisper_dict/en-20251024-171409.wav
  #+end_src
  If you can hear your voice, the microphone is working. If silent, the recording failed.
- Alternatively, check the log file:
  #+begin_src bash
  tail -f ~/.hammerspoon/Spoons/hs_whisperDictation/whisper.log
  #+end_src
  (requires =wd.logger.enableFile = true=)
- Try a longer recording (Whisper needs sufficient audio)

** Audio Not Being Recorded

- Check the Hammerspoon console (Hammerspoon menu ‚Üí Console) for error messages about sox
- Verify =sox= permissions:
  #+begin_src bash
  ls -la /opt/homebrew/bin/sox
  #+end_src
- Check microphone is selected in System Preferences ‚Üí Sound ‚Üí Input
- Test recording manually:
  #+begin_src bash
  sox -d /tmp/test.wav
  #+end_src
- Enable DEBUG logging to see exactly what's happening:
  #+begin_src lua
  wd.logger:setLevel("DEBUG")
  #+end_src
  Then try recording again and check the console output

* Architecture

The Spoon follows a modular design with clear separation of concerns:

** Component Overview

*** Logger System
Custom structured logging with support for multiple levels (DEBUG, INFO, WARN, ERROR) and outputs (console and file). Provides unified logging throughout the Spoon.

*** Recording Manager
Manages audio capture via =sox=. The =toggleRecord()= function:
1. On first call: Starts recording to a timestamped .wav file
2. Starts an elapsed time timer for menubar display
3. On second call: Stops recording and passes audio to transcription

*** Transcription Method System (Pluggable Architecture)
Core innovation allowing multiple transcription backends without code duplication. Each method is self-contained with:

**** Method Interface
Each transcription method must implement:

- =config=: Table containing method-specific configuration (paths, models, etc.)
- =validate()=: Returns true if dependencies exist and are accessible
- =buildCommand(audioFile, lang)=: Returns the command path and arguments table for execution
- =processOutput(audioFile, exitCode, stdOut, stdErr)=: Processes command output and returns (success, text) tuple

**** Built-in Methods

| Method       | Input                | Output       | Use Case                          |
|--------------+---------------------+--------------+-----------------------------------|
| whisperkitcli | stdout streaming    | stdout       | Apple's optimized, auto-download  |
| whispercli   | .txt file creation  | .wav.txt     | Local C++ implementation          |

*** Language Manager
Simple language selection system:
- =obj.languages=: List of supported language codes
- =obj.langIndex=: Currently selected language index
- =showLanguageChooser()=: Interactive chooser menu

*** Menubar Interface
Provides visual status and interaction:
- Displays current state (idle, recording with elapsed time, transcribing)
- Shows active language code
- Click to toggle recording

** Data Flow

#+begin_src
User hotkey (toggle) ‚Üí toggleRecord()
  ‚Üí startRecording() [sox -d file.wav]
  ‚Üí menubar shows recording + elapsed time
  ‚Üí User hotkey (toggle) again
  ‚Üí stopRecording()
  ‚Üí transcribe(audioFile)
    ‚Üí Get selected method from obj.transcriptionMethods[obj.transcriptionMethod]
    ‚Üí method:buildCommand(audioFile, lang) ‚Üí command + args
    ‚Üí hs.task.new() ‚Üí runs command asynchronously
    ‚Üí handleTranscriptionResult() callback
      ‚Üí method:processOutput() ‚Üí extract text
      ‚Üí Save to .txt file
      ‚Üí Copy to clipboard
      ‚Üí Reset menubar to idle
#+end_src

** Extending with Custom Methods

You can add custom transcription methods by adding them to =obj.transcriptionMethods=:

#+begin_src lua
-- Example: Custom transcription method
wd.transcriptionMethods.mymethod = {
  name = "mymethod",
  displayName = "My Custom Transcriber",
  config = {
    cmd = "/path/to/transcriber",
    apiKey = "your-api-key",
    -- Add any method-specific options
  },

  -- Check if the transcriber is available
  validate = function(self)
    return hs.fs.attributes(self.config.cmd) ~= nil
  end,

  -- Build the command to execute
  -- Must return: commandPath, argsTable
  buildCommand = function(self, audioFile, lang)
    return self.config.cmd, {
      "--audio", audioFile,
      "--language", lang,
      "--api-key", self.config.apiKey,
    }
  end,

  -- Process the command output
  -- Must return: (success, text) or (false, errorMessage)
  processOutput = function(self, audioFile, exitCode, stdOut, stdErr)
    if exitCode ~= 0 then
      return false, "Transcriber failed: " .. (stdErr or "unknown error")
    end

    local text = stdOut or ""
    if text == "" then
      return false, "Empty transcription output"
    end

    return true, text
  end,
}

-- Select your custom method
wd.transcriptionMethod = "mymethod"
wd:start()
#+end_src

* License

MIT License - See LICENSE file for details.

* Contributing

Bug reports and suggestions are welcome. Please open an issue or submit a pull request.

* See Also

- [[https://www.hammerspoon.org/][Hammerspoon Documentation]]
- [[https://github.com/argmaxinc/whisperkit-cli][WhisperKit CLI Repository]]
- [[https://github.com/openai/whisper][OpenAI Whisper Repository]]
