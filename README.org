#+title: WhisperDictation Spoon
#+author: dmg
#+date: 2025
#+language: en

* Overview

WhisperDictation is a [[https://www.hammerspoon.org/][Hammerspoon]] Spoon that provides local, offline voice dictation powered by [[https://openai.com/research/whisper][OpenAI's Whisper]] model.

It records audio from your microphone and transcribes it using =whisperkit-cli=, then automatically copies the transcribed text to your clipboard. Both recording and transcription happen asynchronously, allowing you to continue working without interruption. A menubar indicator shows recording status and elapsed time.

** Key Features

- üéôÔ∏è Local voice-to-text transcription (no cloud required)
- üåê Multi-language support (English, Japanese, Spanish, French, etc.)
- üìã Automatic clipboard copy with character count
- ‚ö° Asynchronous processing - continue working while transcription happens in the background
- ‚è±Ô∏è Elapsed time indicator during recording
- üîç Structured logging with file and console output
- ‚å®Ô∏è Customizable hotkeys
- üíæ Transcript files saved alongside audio

* Requirements

** Common Dependencies

All transcription methods require:

1. [[https://sox.sourceforge.net/][sox]] - Audio recording tool
   #+begin_src bash
   brew install sox
   #+end_src

** Transcription Backend (Choose One)

You must choose and install one of the following transcription backends:

*** Option 1: WhisperKit CLI

[[https://github.com/argmaxinc/whisperkit-cli][whisperkit-cli]] - Apple's optimized Whisper implementation

Installation:
#+begin_src bash
brew install whisperkit-cli
#+end_src

Models are downloaded automatically on first use. No additional setup required.

*** Option 2: Whisper CLI (Default)

[[https://github.com/ggerganov/whisper.cpp][whisper.cpp]] - C++ implementation of Whisper

Installation:
#+begin_src bash
brew install whisper-cli
#+end_src

You must manually download and install the desired model binary. Download available models from:
https://huggingface.co/ggerganov/whisper.cpp/tree/main

Example (for large-v3 model):
#+begin_src bash
mkdir -p /usr/local/whisper
cd /usr/local/whisper
wget https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-large-v3.bin
#+end_src

Then configure the model path in your Hammerspoon config:
#+begin_src lua
wd.transcriptionMethods.whispercli.config.modelPath = "/usr/local/whisper/ggml-large-v3.bin"
#+end_src

* Installation

1. Clone or download the Spoon into your Hammerspoon Spoons directory:
   #+begin_src bash
   ~/.hammerspoon/Spoons/hs_whisperDictation.spoon/
   #+end_src

2. Add to your Hammerspoon config (~/.hammerspoon/init.lua):

*Using WhisperKit CLI (default)*:

   #+begin_src lua
   wd = hs.loadSpoon("hs_whisperDictation")
   wd.transcriptionMethods.whisperkitcli.config.model = "large-v3"
   wd.languages = {"en", "ja", "es", "fr"}
   wd.transcriptionMethod = "whisperkitcli"
   wd:bindHotKeys({
       toggle = {{"ctrl", "cmd"}, "d"},
       nextLang = {{"ctrl", "cmd"}, "l"},
   })
   wd:start()
   #+end_src


*Using Whisper CLI*:

   #+begin_src lua
   wd = hs.loadSpoon("hs_whisperDictation")
   wd.transcriptionMethods.whispercli.config.cmd = "/opt/homebrew/bin/whisper-cli"
   wd.transcriptionMethods.whispercli.config.modelPath = "/usr/local/whisper/ggml-large-v3.bin"
   wd.languages = {"en", "ja", "es", "fr"}
   wd.transcriptionMethod = "whispercli"
   wd:bindHotKeys({
       toggle = {{"ctrl", "cmd"}, "d"},
       nextLang = {{"ctrl", "cmd"}, "l"},
   })
   wd:start()
   #+end_src

3. Reload Hammerspoon configuration

** Transcription Methods

The Spoon supports multiple transcription backends. You must choose which one to use by setting =obj.transcriptionMethod=.

*** Supported Methods

**** =whisperkitcli=
Uses [[https://github.com/argmaxinc/whisperkit-cli][WhisperKit CLI]]. Outputs transcription directly to stdout.

Configuration:
#+begin_src lua
wd.transcriptionMethods.whisperkitcli.config = {
  cmd = "/opt/homebrew/bin/whisperkit-cli",
  model = "large-v3",  -- or "tiny", "base", "small", "medium"
}
wd.transcriptionMethod = "whisperkitcli"
#+end_src

**** =whispercli= (Default)
Uses [[https://github.com/ggerganov/whisper.cpp][Whisper.cpp CLI]]. Creates a =.txt= file alongside the audio file.

Configuration:
#+begin_src lua
wd.transcriptionMethods.whispercli.config = {
  cmd = "/opt/homebrew/bin/whisper-cli",
  modelPath = "/usr/local/whisper/ggml-large-v3.bin",
}
wd.transcriptionMethod = "whispercli"
#+end_src

** Customizable Properties

| Property   | Type   | Default                            | Description                   |
|------------+--------+------------------------------------+-------------------------------|
| =tempDir=  | string | "/tmp/whisper_dict"                | Temp directory for recordings |
| =recordCmd=| string | "/opt/homebrew/bin/sox"            | Path to sox binary            |
| =transcriptionMethod= | string | "whispercli" | Active transcription method ("whisperkitcli" or "whispercli") |
| =languages=| table  | {"en"}                             | List of supported languages   |
| =icons=    | table  | See below                          | Emoji icons for UI states     |

** Model Selection

Model configuration depends on which transcription method you use.

*** WhisperKit CLI
Set the model string:

#+begin_src lua
wd.transcriptionMethods.whisperkitcli.config.model = "large-v3"  -- or "tiny", "base", "small", "medium"
#+end_src

Available models and their characteristics:

| Model      | Accuracy | Speed   | Size  |
|------------+----------+---------+-------|
| tiny       | Low      | Fastest | 39M   |
| base       | Fair     | Fast    | 140M  |
| small      | Good     | Medium  | 466M  |
| medium     | Better   | Slower  | 1.5G  |
| large-v3   | Best     | Slowest | 2.9G  |

‚ö†Ô∏è *Warning*: Transcription time depends heavily on the model chosen and the length of audio. Larger models provide better accuracy but take significantly longer to process. For example, a 10-second recording might take 5-10 seconds with "tiny" but several minutes with "large-v3" on standard hardware.

‚ö†Ô∏è *First-Time Model Download*: The first time you use a model, it will be automatically downloaded (this happens only once). Download times vary by model size and internet speed. Ensure you have sufficient disk space and a stable internet connection when first running the Spoon with a new model.

*** Whisper CLI
Set the path to your pre-downloaded model binary:

#+begin_src lua
wd.transcriptionMethods.whispercli.config.modelPath = "/path/to/ggml-large-v3.bin"
#+end_src

Whisper.cpp models must be downloaded separately. See the [[https://github.com/ggerganov/whisper.cpp][whisper.cpp repository]] for available models.

** Icon Customization

You can customize the emoji icons used throughout the Spoon. Available icons are:

| Icon              | Property        | Default | Usage                      |
|-------------------+-----------------+---------+----------------------------|
| =idle=            | obj.icons.idle  | üé§      | Idle/ready state           |
| =recording=       | obj.icons.recording | üéôÔ∏è      | During recording           |
| =clipboard=       | obj.icons.clipboard | üìã      | Text copied to clipboard   |
| =language=        | obj.icons.language | üåê      | Language switching         |
| =stopped=         | obj.icons.stopped | üõë      | Recording stopped          |
| =transcribing=    | obj.icons.transcribing | ‚è≥      | During transcription       |
| =error=           | obj.icons.error | ‚ùå      | Error notifications        |
| =info=            | obj.icons.info  | ‚ÑπÔ∏è      | Info notifications         |

Customize icons in your Hammerspoon config:

#+begin_src lua
wd.icons.idle = "üéôÔ∏è"
wd.icons.recording = "üî¥"
wd.icons.clipboard = "‚úÖ"
#+end_src

** Hotkey Binding

Define custom hotkeys using the =bindHotKeys()= method:

#+begin_src lua
wd:bindHotKeys({
    toggle = {{"ctrl", "cmd"}, "d"},      -- Start/stop recording
    nextLang = {{"ctrl", "cmd"}, "l"},    -- Open language chooser
})
#+end_src

** Logging Configuration

#+begin_src lua
-- Enable file logging, disabled by default
wd.logger.enableFile = true
wd.logger.logFile = os.getenv("HOME") .. "/.hammerspoon/Spoons/hs_whisperDictation/whisper.log"

-- Set log level (DEBUG, INFO, WARN, ERROR)
wd.logger:setLevel("DEBUG")
#+end_src

* Usage

** Starting Recording

Click the menubar icon (üé§) or press your configured toggle hotkey (default: Ctrl+Cmd+D).

The menubar will update to show:
- üéôÔ∏è Recording indicator
- Elapsed time in seconds
- Current language code

** Stopping Recording

Click the menubar icon again or press the toggle hotkey.

The audio is automatically transcribed asynchronously in the background, and the text is copied to your clipboard once transcription completes. You can continue working while transcription happens without waiting for it to finish.

‚ö†Ô∏è *Warning*: It is technically possible to start a new recording while transcription is still in progress. However, the menubar interface may not properly reflect the current state in this scenario. Use with caution to avoid confusion.

** Switching Languages

Press your language switch hotkey (default: Ctrl+Cmd+L) to open a language chooser menu displaying all available languages. The currently active language is marked with a "‚úì Selected" indicator.

The menubar will update to show the new language code.

** Files Generated

Recordings and transcripts are stored in =tempDir=:

#+begin_src
/tmp/whisper_dict/
‚îú‚îÄ‚îÄ en-20240101-120000.wav    # Audio file
‚îú‚îÄ‚îÄ en-20240101-120000.txt    # Transcript
‚îî‚îÄ‚îÄ ...
#+end_src

* API Reference

** Methods

*** =start()=
Initializes the Spoon and sets up the menubar.

#+begin_src lua
wd:start()
#+end_src

*** =stop()=
Stops the Spoon, cleans up resources, and removes the menubar.

#+begin_src lua
wd:stop()
#+end_src

*** =bindHotKeys(mapping)=
Binds hotkeys for controlling the Spoon.

#+begin_src lua
wd:bindHotKeys({
    toggle = {{"ctrl", "cmd"}, "d"},
    nextLang = {{"ctrl", "cmd"}, "l"},
})
#+end_src

** Logger Methods

The Spoon includes a custom logger accessible via =obj.logger=:

- =logger:debug(msg)= - Debug level message
- =logger:info(msg, showAlert)= - Info level message (optional alert)
- =logger:warn(msg, showAlert)= - Warning level message (shows alert by default)
- =logger:error(msg, showAlert)= - Error level message (shows alert by default)
- =logger:setLevel(level)= - Set log level ("DEBUG", "INFO", "WARN", "ERROR")

* Troubleshooting

** Transcription Method Not Found

If you see an error about your transcription method not being found, verify:

1. You've selected the correct method:
   #+begin_src lua
   wd.transcriptionMethod = "whisperkitcli"  -- or "whispercli"
   #+end_src

2. The command path is correct for your system:
   #+begin_src bash
   which whisperkit-cli   # for whisperkitcli
   which whisper-cli      # for whispercli
   #+end_src

3. Update the path in your config if needed:
   #+begin_src lua
   wd.transcriptionMethods.whisperkitcli.config.cmd = "/path/to/whisperkit-cli"
   -- or
   wd.transcriptionMethods.whispercli.config.cmd = "/path/to/whisper-cli"
   #+end_src

** "recording command not found"

Similarly, check =sox= is installed:

#+begin_src bash
which sox
#+end_src

Update the path if necessary:

#+begin_src lua
wd.recordCmd = "/path/to/sox"
#+end_src

** Transcription Produces Empty Output

- Ensure your microphone is working and not muted
- Check log file for detailed error messages:
  #+begin_src bash
  tail -f ~/.hammerspoon/Spoons/hs_whisperDictation/whisper.log
  #+end_src
- Try a longer recording (Whisper needs sufficient audio)

** Audio Not Being Recorded

- Verify =sox= permissions
- Check microphone is selected in System Preferences
- Test recording manually:
  #+begin_src bash
  sox -d /tmp/test.wav
  #+end_src

* Architecture

The Spoon consists of several key components:

** Logger System
Custom structured logging with support for multiple levels and outputs (console and file).

** Recording Manager
Handles audio input via =sox= and manages the recording lifecycle.

** Transcription Method System
Pluggable transcription handlers. Each method defines:
- =config=: Method-specific configuration
- =validate()=: Check if dependencies are available
- =buildCommand(audioFile, lang)=: Construct the command to run
- =processOutput(audioFile, exitCode, stdOut, stdErr)=: Process the result

** Language Manager
Tracks current language and provides language switching functionality.

** Menubar Interface
Provides visual feedback on recording status and allows UI interaction.

** Extending with Custom Methods

You can add custom transcription methods by adding them to =obj.transcriptionMethods=:

#+begin_src lua
wd.transcriptionMethods.mymethod = {
  name = "mymethod",
  displayName = "My Transcription Method",
  config = {
    cmd = "/path/to/transcriber",
    -- other config options
  },
  validate = function(self)
    return hs.fs.attributes(self.config.cmd) ~= nil
  end,
  buildCommand = function(self, audioFile, lang)
    -- Return command and arguments table
    return self.config.cmd, {"--audio", audioFile, "--language", lang}
  end,
  processOutput = function(self, audioFile, exitCode, stdOut, stdErr)
    if exitCode ~= 0 then
      return false, "Command failed"
    end
    -- Return success and text
    return true, stdOut
  end,
}

wd.transcriptionMethod = "mymethod"
#+end_src

* License

MIT License - See LICENSE file for details.

* Contributing

Bug reports and suggestions are welcome. Please open an issue or submit a pull request.

* See Also

- [[https://www.hammerspoon.org/][Hammerspoon Documentation]]
- [[https://github.com/argmaxinc/whisperkit-cli][WhisperKit CLI Repository]]
- [[https://github.com/openai/whisper][OpenAI Whisper Repository]]
